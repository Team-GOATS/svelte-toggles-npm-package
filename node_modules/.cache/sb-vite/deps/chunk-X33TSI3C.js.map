{
  "version": 3,
  "sources": ["../../../@storybook/svelte/dist/chunk-KSAWIQN3.mjs", "../../../@storybook/svelte/templates/SlotDecorator.svelte", "../../../@storybook/svelte/templates/PreviewRender.svelte"],
  "sourcesContent": ["import { addons, sanitizeStoryContextUpdate } from '@storybook/preview-api';\nimport SlotDecorator from '@storybook/svelte/templates/SlotDecorator.svelte';\nimport { RESET_STORY_ARGS } from '@storybook/core-events';\nimport PreviewRender from '@storybook/svelte/templates/PreviewRender.svelte';\n\nfunction unWrap(obj){return obj&&typeof obj==\"object\"&&\"default\"in obj?obj.default:obj}function prepareStory(context,rawStory,rawInnerStory){let story=unWrap(rawStory),innerStory=rawInnerStory&&unWrap(rawInnerStory),preparedStory;return !story||Object.keys(story).length===0?preparedStory={Component:context.component}:story.Component?preparedStory=story:preparedStory={Component:story},innerStory?{Component:SlotDecorator,props:{...innerStory,decorator:preparedStory}}:preparedStory}function decorateStory(storyFn,decorators){return decorators.reduce((decorated,decorator)=>context=>{let story,decoratedStory=decorator(update=>(story=decorated({...context,...sanitizeStoryContextUpdate(update)}),story),context);return story||(story=decorated(context)),decoratedStory===story?story:prepareStory(context,decoratedStory,story)},context=>prepareStory(context,storyFn(context)))}var componentsByDomElement=new Map;function teardown(canvasElement){componentsByDomElement.has(canvasElement)&&(componentsByDomElement.get(canvasElement).$destroy(),canvasElement.innerHTML=\"\",componentsByDomElement.delete(canvasElement));}var storyIdsToRemountFromResetArgsEvent=new Set;addons.getChannel().on(RESET_STORY_ARGS,({storyId})=>{storyIdsToRemountFromResetArgsEvent.add(storyId);});function renderToCanvas({storyFn,kind,name,showMain,showError,storyContext,forceRemount},canvasElement){let existingComponent=componentsByDomElement.get(canvasElement),remount=forceRemount;if(storyIdsToRemountFromResetArgsEvent.has(storyContext.id)&&(remount=!0,storyIdsToRemountFromResetArgsEvent.delete(storyContext.id)),remount&&teardown(canvasElement),!existingComponent||remount){let createdComponent=new PreviewRender({target:canvasElement,props:{storyFn,storyContext,name,kind,showError}});componentsByDomElement.set(canvasElement,createdComponent);}else existingComponent.$set({storyFn,storyContext,name,kind,showError});return showMain(),()=>{teardown(canvasElement);}}var render=(args,context)=>{let{id,component:Component}=context;if(!Component)throw new Error(`Unable to render story ${id} as the component annotation is missing from the default export`);return {Component,props:args}};\n\nexport { decorateStory, render, renderToCanvas };\n", "<script>\n  import { onMount } from 'svelte';\n\n  export let decorator = undefined;\n  export let Component;\n  export let props = {};\n  export let on = undefined;\n\n  let instance;\n  let decoratorInstance;\n\n  function getInstance() {\n    // instance can be undefined if a decorator doesn't have <slot/>\n    return instance || decoratorInstance;\n  }\n\n  if (on) {\n    // Attach svelte event listeners.\n    Object.keys(on).forEach((eventName) => {\n      onMount(() => getInstance().$on(eventName, on[eventName]));\n    });\n  }\n</script>\n\n{#if decorator}\n  <svelte:component this={decorator.Component} {...decorator.props} bind:this={decoratorInstance}>\n    <svelte:component this={Component} {...props} bind:this={instance} />\n  </svelte:component>\n{:else}\n  <svelte:component this={Component} {...props} bind:this={instance} />\n{/if}\n", "<script>\n  import SlotDecorator from './SlotDecorator.svelte';\n  import { dedent } from 'ts-dedent';\n\n  export let name;\n  export let kind;\n  export let storyFn;\n  export let showError;\n  export let storyContext;\n\n  let {\n    /** @type {SvelteComponent} */\n    Component,\n    /** @type {any} */\n    props = {},\n    /** @type {{[string]: () => {}}} Attach svelte event handlers */\n    on,\n  } = storyFn();\n\n  // reactive, re-render on storyFn change\n  $: ({ Component, props = {}, on } = storyFn());\n\n  const eventsFromArgTypes = Object.fromEntries(\n    Object.entries(storyContext.argTypes)\n      .filter(([k, v]) => v.action && props[k] != null)\n      .map(([k, v]) => [v.action, props[k]])\n  );\n\n  if (!Component) {\n    showError({\n      title: `Expecting a Svelte component from the story: \"${name}\" of \"${kind}\".`,\n      description: dedent`\n        Did you forget to return the Svelte component configuration from the story?\n        Use \"() => ({ Component: YourComponent, props: {} })\"\n        when defining the story.\n      `,\n    });\n  }\n</script>\n\n<SlotDecorator {Component} {props} on={{ ...eventsFromArgTypes, ...on }} />\n"],
  "mappings": "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",
  "names": ["ctx", "instance", "ctx"]
}
